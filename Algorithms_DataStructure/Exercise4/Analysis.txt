Analysis:

Time Complexity of Each Operation-->

Add Employee-->
Best Case: O(1) (if the array is not full)
Worst Case: O(1) (if the array is not full)


Search Employee-->
Best Case: O(1) (if the employee is the first element)
Worst Case: O(n) (if the employee is the last element or not found)


Traverse Employees-->
Best Case: O(n)
Worst Case: O(n)


Delete Employee-->
Best Case: O(1) (if the employee is the last element)
Worst Case: O(n) (if the employee is the first element)



Limitations of Arrays-->

Fixed Size: Once an array is created, its size cannot be changed. This can lead to wasted memory if the array is underutilized or insufficient space if the array is overutilized.

Inefficient Deletion: Deleting an element requires shifting all subsequent elements, which can be time-consuming (O(n)).

Lack of Flexibility: Arrays do not support dynamic resizing, making them less suitable for applications where the number of elements can change frequently.
