Analysis:

Time Complexity of Each Operation-->

Add Task-->
Best Case: O(1) (if adding to the head)
Worst Case: O(n) (if adding to the end)


Search Task-->
Best Case: O(1) (if the task is the first element)
Worst Case: O(n) (if the task is the last element or not found)


Traverse Tasks-->
Best Case: O(n)
Worst Case: O(n)


Delete Task-->
Best Case: O(1) (if the task is the head)
Worst Case: O(n) (if the task is the last element)



Advantages of Linked Lists over Arrays for Dynamic Data -->

Dynamic Size: Linked lists can grow and shrink dynamically, making them more flexible for dynamic data.

Efficient Insertions/Deletions: Insertions and deletions are generally more efficient, especially when modifying elements in the middle of the list.

Memory Utilization: Linked lists do not require contiguous memory allocation, which can be beneficial when dealing with large datasets or fragmented memory.
